{"version":3,"sources":["DisplayQuote.js","TweetQuoteButton.js","GetNewQuoteButton.js","DisplayButtons.js","App.js","index.js"],"names":["DisplayQuote","props","react_default","a","createElement","className","id","quote","author","TweetQuoteButton","Button_default","variant","href","tweetQuote","target","rel","GetNewQuoteButton","onClick","getNewQuote","DisplayButtons","TweetQuoteButton_TweetQuoteButton","GetNewQuoteButton_GetNewQuoteButton","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tweet","bind","assertThisInitialized","createTweet","_this2","fetch","then","response","json","setState","character","catch","error","console","data","replace","Container_default","DisplayQuote_DisplayQuote","DisplayButtons_DisplayButtons","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"6OAEaA,EAAe,SAACC,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACNJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,QAAQL,EAAMM,QAEzBL,EAAAC,EAAAC,cAAA,OAAKE,GAAI,cACPJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,UAAT,IAAoBL,EAAMO,2BCNrBC,EAAmB,SAACR,GAC/B,OACIC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,QAAQ,WACdT,EAAAC,EAAAC,cAAA,KAAGE,GAAG,cACHD,UAAU,uBACVO,KAAMX,EAAMY,WACZC,OAAO,SACPC,IAAI,uBAJP,qBCHKC,EAAoB,SAACf,GAChC,OACIC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,QAAQ,UAAUL,GAAG,YACrBW,QAAShB,EAAMiB,aADvB,iBCAOC,EAAiB,SAAClB,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACNJ,EAAAC,EAAAC,cAACgB,EAAD,CAAkBP,WAAYZ,EAAMY,aACpCX,EAAAC,EAAAC,cAACiB,EAAD,CAAmBH,YAAajB,EAAMiB,iCCgE7BI,cAnEb,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzB,KAED6B,MAAQ,CACXvB,MAAO,GACPC,OAAQ,GACRuB,MAAO,IAITR,EAAKL,YAAcK,EAAKL,YAAYc,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IACnBA,EAAKW,YAAcX,EAAKW,YAAYF,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IAXFA,6EAeL,IAAAY,EAAAT,KAIZU,MADkB,gDAEjBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GACJJ,EAAKK,SAAS,CACVjC,MAAOgC,EAAK,GAAGhC,MACfC,OAAQ+B,EAAK,GAAGE,UAChBV,MAAOI,EAAKD,YAAYK,EAAK,QAIlCG,MAAM,SAAAC,GACLC,QAAQD,MAAM,4BACdR,EAAKK,SAAS,CACZjC,MAAO,2BACPC,OAAQ,GACRuB,MAAO,2CAMDc,GAKV,MAFY,2DAFSA,EAAKtC,MAAMuC,QAAQ,IAAK,OAG5B,SAFKD,EAAKJ,UAAUK,QAAQ,GAAI,oDAQjDpB,KAAKR,+CAIL,OACEhB,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,CAAWG,GAAG,YAAYD,UAAU,OAClCH,EAAAC,EAAAC,cAAA,MAAIE,GAAG,SAAP,0BACAJ,EAAAC,EAAAC,cAAC4C,EAAD,CAAczC,MAAOmB,KAAKI,MAAMvB,MAClBC,OAAQkB,KAAKI,MAAMtB,SACjCN,EAAAC,EAAAC,cAAC6C,EAAD,CAAgB/B,YAAaQ,KAAKR,YAClBL,WAAYa,KAAKI,MAAMC,gBA9D7BmB,mBCAlBC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3ea654bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const DisplayQuote = (props) => {\r\n  return (\r\n    <div className=\"quote-text\">\r\n      <div id=\"text-div\">\r\n        <span id=\"text\">{props.quote}</span>\r\n      </div>\r\n      <div id= \"author-div\">\r\n        <span id=\"author\">-{props.author}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport const TweetQuoteButton = (props) => {\r\n  return (\r\n      <Button variant=\"primary\">\r\n        <a id=\"tweet-quote\"\r\n           className=\"twitter-share-button\"\r\n           href={props.tweetQuote}\r\n           target=\"_blank\"\r\n           rel=\"noopener noreferrer\">Post to Twitter\r\n        </a>\r\n      </Button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport const GetNewQuoteButton = (props) => {\r\n  return (\r\n      <Button variant=\"success\" id=\"new-quote\"\r\n              onClick={props.getNewQuote}>Random Quote\r\n      </Button>\r\n  );\r\n}\r\n","// Only used a wrapper for Tweet Button and Random Quote Button\r\nimport React from 'react';\r\nimport { TweetQuoteButton } from './TweetQuoteButton';\r\nimport { GetNewQuoteButton } from './GetNewQuoteButton';\r\n\r\nexport const DisplayButtons = (props) => {\r\n  return (\r\n    <div id=\"button-div\">\r\n      <TweetQuoteButton tweetQuote={props.tweetQuote}/>\r\n      <GetNewQuoteButton getNewQuote={props.getNewQuote}/>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport { DisplayQuote } from './DisplayQuote';\nimport { DisplayButtons } from './DisplayButtons';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // State centered in app and passed down to child components\n    this.state = {\n      quote: '',\n      author: '',\n      tweet: '',\n    }\n\n    // bind state to these functions\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.createTweet = this.createTweet.bind(this);\n  }\n\n  // called on initial page load and when Random Quote button is clicked\n  getNewQuote() {\n\n    // fetch JSON quote object from this url\n    const END_POINT = 'https://thesimpsonsquoteapi.glitch.me/quotes';\n    fetch(END_POINT)\n    .then(response => response.json())\n    // setState to update display\n    .then(json => {\n      this.setState({\n          quote: json[0].quote,\n          author: json[0].character,\n          tweet: this.createTweet(json[0])\n      })\n    })\n    // show error on failed fetch\n    .catch(error => {\n      console.error(\"Failed to retrieve quote\");\n      this.setState({\n        quote: \"Failed to retrieve quote\",\n        author: \"\",\n        tweet: \"\"\n      })\n    });\n  }\n\n  // take quote and author and convert to Twitetr link\n  createTweet(data) {\n    let convertedQuote = data.quote.replace(' ', '%20');\n    let convertedAuthor = data.character.replace('', '%20');\n    let tweet = \"https://twitter.com/intent/tweet?hashtags=quote&text=%22\" +\n    convertedQuote + \"%22%20\" + convertedAuthor;\n    return tweet;\n  }\n\n  // update state on load\n  componentWillMount() {\n    this.getNewQuote();\n  }\n\n  render() {\n    return (\n      <Container id=\"quote-box\" className='App'>\n        <h1 id=\"title\">Random Quote Generator</h1>\n        <DisplayQuote quote={this.state.quote}\n                      author={this.state.author} />\n        <DisplayButtons getNewQuote={this.getNewQuote}\n                        tweetQuote={this.state.tweet}/>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}